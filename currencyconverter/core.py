import numpy as np
import pandas as pd
import networkx as nx

from . import helpers

def convert_to_aud(inputfilepath: str, conversiondatafilepath: str) -> list:
    '''
    Takes two input filepaths and returns a list of tuples of AUD converted amounts.
    The first file defines the values to be converted and has three columns:
    (1) Integer ID; (2) Numeric value; (3) 3-character currency code.
    The seocnd file defines currency conversion data and has three columns:
    (1) Currency converting from; (2) Currency converting to; (3) Conversion rate.

    Parameters
    ----------
    inputfilepath : str
        File path to input.csv
    conversiondatafilepath : str
        File path to currencyconversiondata.csv

    Returns
    -------
    list
        list of tuples in (index: int, currency_converted_amount: float64) format
    '''
    return convert_to_currency(inputfilepath, conversiondatafilepath, 'AUD')

def convert_to_currency(inputfilepath: str, conversiondatafilepath: str, tocurrency: str) -> list:
    '''
    Takes two input filepaths and returns a list of tuples of AUD converted amounts.
    The first file defines the values to be converted and has three columns:
    (1) Integer ID; (2) Numeric value; (3) 3-character currency code.
    The second file defines currency conversion data and has three columns:
    (1) Currency converting from; (2) Currency converting to; (3) Conversion rate.

    Parameters
    ----------
    inputfilepath : str
        File path to input.csv
    conversiondatafilepath : str
        File path to currencyconversiondata.csv
    tocurrency : str
        3-character currency code to convert the currency to.

    Returns
    -------
    list
        list of tuples in (index: int, currency_converted_amount: float64) format
    '''
    df_input = read_input(inputfilepath)
    currency_graph = read_conversion_database(conversiondatafilepath)
    # for each row in input file, get converted amount
    df_input[tocurrency] = df_input.apply(lambda x : get_currency_value(currency_graph, x['Amount'], x['Currency'], tocurrency), axis=1)
    return list(zip(df_input['Index'], df_input[tocurrency]))

def read_input(filepath: str) -> pd.DataFrame:
    '''
    Takes csv filepath and returns a pandas dataframe with schema.
    This file defines the values to be converted and has three columns:
    (1) Integer ID; (2) Numeric value; (3) 3-character currency code.

    Parameters
    ----------
    filepath : str
        File path to input.csv

    Returns
    -------
    pandas.DataFrame
        Dataframe with Index, Amount, Currency as columns
    '''
    schema = { 
        'Index' :  np.int64, 
        'Amount' : np.float64, 
        'Currency' : str
    }
    df_input = helpers.read_csv_to_df(filepath, schema) 
    return df_input

def read_conversion_database(filepath: str) -> nx.Graph:
    '''
    Takes csv filepath and returns a corresponding networkx graph.
    This file defines currency conversion data and has three columns:
    (1) Currency converting from; (2) Currency converting to; (3) Conversion rate.

    Parameters
    ----------
    filepath : str
        File path to currencyconversiondata.csv

    Returns
    -------
    networkx.Graph
        Graph with FromCurrency and ToCurrency values as nodes and Amount as edges
    '''
    schema = { 
        'FromCurrency' : str,
        'ToCurrency' : str,
        'Amount' : np.float64
    }
    df_conversion_db = helpers.read_csv_to_df(filepath, schema)
    # Create graph from df_conversion_db
    currency_graph = helpers.translate_df_to_graph(df_conversion_db)
    return currency_graph

def get_currency_value(graph: nx.Graph, inputamount: np.float64, fromcurrency: str, tocurrency: str='AUD') -> np.float64:
    '''
    Traverses the currency conversion database graph to find the optimal path from source to target nodes.
    When the optimal path is found, the edges of these traversal nodes are multiplied.
    Effectively doing multiplication daisy-chain starting the input amount.

    Parameters
    ----------
    graph : nx.Graph
        Currency conversion database generated by read_conversion_database function
    inputamount : np.float64
        Amount to convert
    fromcurrency : str
        3-character currency code to convert the currency from.
    tocurrency : str
        3-character currency code to convert the currency to. Default value is 'AUD'

    Returns
    -------
    float64
        Converted amount rounded up to nearest .01
    '''
    if fromcurrency == tocurrency:
        return round(inputamount, 2)
    output_amount = 0.0
    graph_path = helpers.get_path(graph, fromcurrency, tocurrency)
    len_graph_path = len(graph_path)
    if(len_graph_path > 0):
        output_amount = inputamount
        for index in range(len_graph_path - 1):
            output_amount *= graph[graph_path[index]][graph_path[index + 1]]['Amount']
    # round-up to nearest .01
    return round(output_amount, 2)
